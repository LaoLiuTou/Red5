<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans" 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:lang="http://www.springframework.org/schema/lang" 
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd 
	http://www.springframework.org/schema/lang http://www.springframework.org/schema/lang/spring-lang.xsd 
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

<!-- DO NOT FORMAT THIS FILE IN ECLIPSE -->
	
	<!-- <bean id="placeholderConfig" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location" value="classpath:/red5/red5.properties" />
	</bean> -->
	<!-- Server bean -->
	<bean id="red5.server" class="org.red5.server.Server" />
	
    <bean id="minaEncoder" class="org.red5.server.net.rtmp.codec.RTMPMinaProtocolEncoder" scope="prototype" />

    <bean id="minaDecoder" class="org.red5.server.net.rtmp.codec.RTMPMinaProtocolDecoder" scope="prototype" />

	<!-- Deals with StatusObjects representing statuses like NetConnection.Connect.Success status -->
	<bean id="statusObjectService" class="org.red5.server.net.rtmp.status.StatusObjectService" autowire="byType"/>	
    
	<!-- Remoting calls codec factory -->
	<bean id="remotingCodecFactory" class="org.red5.server.net.remoting.codec.RemotingCodecFactory" autowire="byType" init-method="init"/>
		
	<!-- Streamable file factory -->
	<bean id="streamableFileFactory" class="org.red5.server.stream.StreamableFileFactory">
		<property name="services">
			<list>
				<bean id="flvFileService" class="org.red5.server.service.flv.impl.FLVService">
					<property name="generateMetadata" value="true"/>
				</bean>
				<bean id="mp3FileService" class="org.red5.server.service.mp3.impl.MP3Service"/>
				<bean id="mp4FileService" class="org.red5.server.service.mp4.impl.MP4Service"/>
				<bean id="m4aFileService" class="org.red5.server.service.m4a.impl.M4AService"/>
			</list>
		</property>
	</bean>
	
	<!-- Handles creation / lookup of shared objects -->
	<bean id="sharedObjectService" class="org.red5.server.so.SharedObjectService">
	<!-- 	<property name="maximumEventsPerUpdate" value="${so.max.events.per.update}"/> -->
		<property name="persistenceClassName">
			<value>org.red5.server.persistence.FilePersistence</value>
		</property>
	</bean>
	
	<!-- High level access to streams -->
	<bean id="streamService" class="org.red5.server.stream.StreamService"/>
	
	<!-- High level access to broadcasted streams -->
	<bean id="providerService" class="org.red5.server.stream.ProviderService"/>
	
	<!-- Provides output to consumers -->
	<bean id="consumerService" class="org.red5.server.stream.ConsumerService"/>
 
	<!-- Scheduling service -->
	<bean id="schedulingService" class="org.red5.server.scheduling.QuartzSchedulingService" />
		
	<!-- Use injection to setup thread pool for remoting clients -->
	<bean id="remotingClient" class="org.red5.server.net.remoting.RemotingClient">
		<property name="poolSize" value="8"/>
	</bean>
	
	<bean id="object.cache" class="org.red5.cache.impl.NoCacheImpl"/>
	<!--
	    Cache to use for keyframe metadata.
	-->
	<bean id="keyframe.cache" class="org.red5.io.CachingFileKeyFrameMetaCache">
		<property name="maxCacheEntry" value="500" />
	</bean>
	
	<!--
	    Represents FLV files
	    Use injection to set the cache impl to be used with flvs
	-->
    <bean id="flv.impl" class="org.red5.io.flv.impl.FLV">
        <property name="cache">
            <ref bean="object.cache"/>
        </property>
    </bean>
	
	<!-- Use injection to set the keyframe cache for FLV files -->
    <bean id="flvreader.impl" class="org.red5.io.flv.impl.FLVReader">
        <property name="keyFrameCache">
            <ref bean="keyframe.cache"/>
        </property>
    </bean>
	
	<!-- Use injection to set the keyframe cache for MP4 files -->
    <bean id="mp4reader.impl" class="org.red5.io.mp4.impl.MP4Reader"/>
	
	<!-- Use injection to set the keyframe cache for MP3 files -->
    <bean id="mp3reader.impl" class="org.red5.io.mp3.impl.MP3Reader">
        <property name="frameCache">
            <ref bean="keyframe.cache"/>
        </property>
    </bean> 
	
    <!-- Use injection to set the buffer type for reading FLV files -->
    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod">
            <value>org.red5.io.flv.impl.FLVReader.setBufferType</value>
        </property>
        <!-- Three buffer types are available 'auto', 'heap', and 'direct' -->
        <property name="arguments" value="auto"/>
    </bean>
        
    <!-- Use injection to set the buffer size for reading FLV files -->
    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod">
            <value>org.red5.io.flv.impl.FLVReader.setBufferSize</value>
        </property>
        <!-- Three buffer types are available 'auto', 'heap', and 'direct' -->
        <property name="arguments" value="4096"/>
    </bean>
	
	<!-- Low level access for recording to file -->
    <bean id="fileConsumer" scope="prototype" lazy-init="true" class="org.red5.server.stream.consumer.FileConsumer">        
        <property name="delayWrite" value="true"/>
        <property name="queueThreshold" value="120"/>
    </bean>
	
	<!-- ClientBroadcastStream and PlaylistSubscriberStream
		that will be used by RTMPConnection and maybe other classes.
		These beans are lazy-init because most likely server will need
		to be up and running before we can get a smart implementation
		of these streams
	-->
	<bean id="playlistSubscriberStream" scope="prototype" lazy-init="true" class="org.red5.server.stream.PlaylistSubscriberStream">
		<property name="bufferCheckInterval" value="5000"/>
		<property name="underrunTrigger" value="10"/>
	</bean>
	
	<bean id="clientBroadcastStream" scope="prototype" lazy-init="true" class="org.red5.server.stream.ClientBroadcastStream">
        <property name="automaticRecording" value="false"/>
	</bean>

</beans>